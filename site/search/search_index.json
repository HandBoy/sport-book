{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Full code on github . Setup Development to run the project # Python path $ which python3 # Create virtual enviroment $ virtualenv --python='/usr/bin/python3' .venv # Activate virtual enviroment $ source .venv/bin/activate # Install requirements $ make install # Run project $ make run Documentation You can acces the documentation online: link # Run and access Mkdocs $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.30 seconds INFO - [19:46:59] Serving on http://127.0.0.1:8000/ INFO - [19:46:59] Browser connected: http://127.0.0.1:8000/ Tests # Run all tests $ make tests # Run all the tests in a particular test file $ pytest tests/folder/test_resource.py # Run only particular test class in that file $ pytest tests/folder/test_resource.py::TestResouce These warnings are thrown by flask-apispec plugin. Project Struture The project apply some clean archtecture to share responsibilities: Api: Contains all endpoints. Use Cases: This layer contains application specific business rules. It encapsulates and implements all of the use cases of the system. Repositories: Contains logic to send and retrieve data from database. Domain: The entities that encapsulate enterprise wide business rules. Above we have a explanation about all project folders: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 api # Api Views, exceptions, and Serializers \u2502 \u251c\u2500\u2500 configuration.py # Config environment variables \u2502 \u251c\u2500\u2500 conftest.py # define the fixture functions to test files. \u2502 \u251c\u2500\u2500 domain.py # The entities enterprise wide business rules. \u2502 \u251c\u2500\u2500 ext # Flask extensions \u2502 \u2502 \u251c\u2500\u2500 database.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 serializer.py \u2502 \u251c\u2500\u2500 __init__.py # Create Flask App \u2502 \u251c\u2500\u2500 repositories # Interfaces to do comunication with database \u2502 \u2502 \u251c\u2500\u2500 event_repository.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u251c\u2500\u2500 selection_repository.py \u2502 \u2502 \u2514\u2500\u2500 sport_repository.py \u2502 \u251c\u2500\u2500 schema.sql # Sql Script to init the database. \u2502 \u251c\u2500\u2500 tests # All project tests \u2502 \u2514\u2500\u2500 use_cases # This layer contains application specific business rules. \u2502 \u251c\u2500\u2500 event_use_cases.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 selection_use_cases.py \u2502 \u2514\u2500\u2500 sport_use_cases.py \u251c\u2500\u2500 docs # Project Documentation \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirements # Project Requirements \u251c\u2500\u2500 base.txt \u2514\u2500\u2500 dev.txt Next Steps Filters: All (sports/events/selections) with a name satisfying a particular regex Filters: All (sports/events) with a minimum number of active (events/selections) higher than a threshold Filters: Events scheduled to start in a specific timeframe for a specific timezone Try fix warnings from tests. Add authorization in endpoints. Expecify the error when send data different expected by scheme. Add pagination in list endpoints. Remove code duplication between repositories. Add partial update. Register Api exception. Increase coverage.","title":"Getting Started"},{"location":"#getting-started","text":"Full code on github .","title":"Getting Started"},{"location":"#setup-development-to-run-the-project","text":"# Python path $ which python3 # Create virtual enviroment $ virtualenv --python='/usr/bin/python3' .venv # Activate virtual enviroment $ source .venv/bin/activate # Install requirements $ make install # Run project $ make run","title":"Setup Development to run the project"},{"location":"#documentation","text":"You can acces the documentation online: link # Run and access Mkdocs $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.30 seconds INFO - [19:46:59] Serving on http://127.0.0.1:8000/ INFO - [19:46:59] Browser connected: http://127.0.0.1:8000/","title":"Documentation"},{"location":"#tests","text":"# Run all tests $ make tests # Run all the tests in a particular test file $ pytest tests/folder/test_resource.py # Run only particular test class in that file $ pytest tests/folder/test_resource.py::TestResouce These warnings are thrown by flask-apispec plugin.","title":"Tests"},{"location":"#project-struture","text":"The project apply some clean archtecture to share responsibilities: Api: Contains all endpoints. Use Cases: This layer contains application specific business rules. It encapsulates and implements all of the use cases of the system. Repositories: Contains logic to send and retrieve data from database. Domain: The entities that encapsulate enterprise wide business rules. Above we have a explanation about all project folders: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 api # Api Views, exceptions, and Serializers \u2502 \u251c\u2500\u2500 configuration.py # Config environment variables \u2502 \u251c\u2500\u2500 conftest.py # define the fixture functions to test files. \u2502 \u251c\u2500\u2500 domain.py # The entities enterprise wide business rules. \u2502 \u251c\u2500\u2500 ext # Flask extensions \u2502 \u2502 \u251c\u2500\u2500 database.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 serializer.py \u2502 \u251c\u2500\u2500 __init__.py # Create Flask App \u2502 \u251c\u2500\u2500 repositories # Interfaces to do comunication with database \u2502 \u2502 \u251c\u2500\u2500 event_repository.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u251c\u2500\u2500 selection_repository.py \u2502 \u2502 \u2514\u2500\u2500 sport_repository.py \u2502 \u251c\u2500\u2500 schema.sql # Sql Script to init the database. \u2502 \u251c\u2500\u2500 tests # All project tests \u2502 \u2514\u2500\u2500 use_cases # This layer contains application specific business rules. \u2502 \u251c\u2500\u2500 event_use_cases.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 selection_use_cases.py \u2502 \u2514\u2500\u2500 sport_use_cases.py \u251c\u2500\u2500 docs # Project Documentation \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirements # Project Requirements \u251c\u2500\u2500 base.txt \u2514\u2500\u2500 dev.txt","title":"Project Struture"},{"location":"#next-steps","text":"Filters: All (sports/events/selections) with a name satisfying a particular regex Filters: All (sports/events) with a minimum number of active (events/selections) higher than a threshold Filters: Events scheduled to start in a specific timeframe for a specific timezone Try fix warnings from tests. Add authorization in endpoints. Expecify the error when send data different expected by scheme. Add pagination in list endpoints. Remove code duplication between repositories. Add partial update. Register Api exception. Increase coverage.","title":"Next Steps"},{"location":"api/","text":"Full example Overview For resolver the test I developed the endpoints: Endpoints Methods Description Query Filter /swagger/ GET Swagger json --- /swagger-ui/ GET Swagger Iteractive --- /api/v1/events GET, POST List and create a events Yes /api/v1/events/ PUT Update an event No /api/v1/selections GET, POST List and create selections Yes /api/v1/selections/ PUT Update a selection. No /api/v1/sports GET, POST List and create a sport Yes /api/v1/sports/ PUT Update a sport No Filtering Some endpoints are enable query filter: /api/v1/events /api/v1/selections /api/v1/sports /sports Fields that could be used to get events: id: int uuid: uuid slug: str active: bool, [0, 1] created_at: datetime, UTC format '2022-04-04 01:11:45.904114' Example: Request curl --request GET 'http://127.0.0.1:5000/api/v1/sports?active=1' \\ --header 'Content-Type: application/json' Response # 200 Success [ { \"active\": true, \"created_at\": \"2022-03-27T00:15:08\", \"slug\": \"sport-1\", \"uuid\": \"93a10761-e469-4adb-a0c2-9788408e1c85\" }, { \"active\": true, \"created_at\": \"2022-03-27T00:16:40\", \"slug\": \"sport-2\", \"uuid\": \"8cc3a409-7557-42bf-96cc-82776c0dba8a\" } ] /events Fields that could be used as query filters to get events: id: int sport_id: int uuid: uuid name: str slug: str active: bool, [0, 1] event_type: str, values can be: pending, started, ended, cancelled. status: str, values can be: preplay, inplay scheduled_at: datetime, UTC format '2022-04-04 01:11:45.904114' start_at: datetime, UTC format'2022-04-04 01:11:45.904114' created_at: datetime, UTC format '2022-04-04 01:11:45.904114' Request curl --request GET 'http://127.0.0.1:5000/api/v1/events?event_type=preplay&active=1' \\ --header 'Content-Type: application/json' Response # 200 Success [ { \"active\": true, \"created_at\": \"2022-04-01 00:26:31\", \"event_type\": \"EventType.preplay\", \"name\": \"Event First\", \"scheduled_at\": \"2022-03-28 00:15:08\", \"slug\": \"event-first\", \"start_at\": null, \"status\": \"EventStatus.pending\", \"uuid\": \"e1ec2c23-1148-48a3-a3be-2e61346323ab\" }, { \"active\": true, \"created_at\": \"2022-04-01 00:26:33\", \"event_type\": \"EventType.preplay\", \"name\": \"Event Third\", \"scheduled_at\": \"2022-03-28 00:15:08\", \"slug\": \"event-thrid\", \"start_at\": \"2022-04-01 00:26:33\", \"status\": \"EventStatus.started\", \"uuid\": \"d224d7fa-ce66-4f56-bf14-ab4550ce47b9\" } ] /selections Fields that could be used as query filters to get selections: id: int event_id: int uuid: uuid4 price: float active: bool, [0, 1] outcome: str, values can be: unsettled, void, lose, win. created_at: datetime, UTC format '2022-04-04 01:11:45.904114' Request curl --request GET 'http://127.0.0.1:5000/api/v1/selections?outcome=win&active=1' \\ --header 'Content-Type: application/json' Response # 200 Success [ { \"active\": true, \"created_at\": \"2022-04-02 22:45:55\", \"uuid\": \"450c30b7-97d5-490c-abbd-249fa2a0a8e7\" } ] Erros # 4xx Error Generics { \"message\": \"Filter with nonexistent field\", \"status_code\": 400 } # 422 Validation Error { \"message\": \"Field invalid\", \"status_code\": 422 } # 401 Unauthorized { \"msg\": \"Token has expired\" }","title":"Api Documentation"},{"location":"api/#full-example","text":"","title":"Full example"},{"location":"api/#overview","text":"For resolver the test I developed the endpoints: Endpoints Methods Description Query Filter /swagger/ GET Swagger json --- /swagger-ui/ GET Swagger Iteractive --- /api/v1/events GET, POST List and create a events Yes /api/v1/events/ PUT Update an event No /api/v1/selections GET, POST List and create selections Yes /api/v1/selections/ PUT Update a selection. No /api/v1/sports GET, POST List and create a sport Yes /api/v1/sports/ PUT Update a sport No","title":"Overview"},{"location":"api/#filtering","text":"Some endpoints are enable query filter: /api/v1/events /api/v1/selections /api/v1/sports","title":"Filtering"},{"location":"api/#sports","text":"Fields that could be used to get events: id: int uuid: uuid slug: str active: bool, [0, 1] created_at: datetime, UTC format '2022-04-04 01:11:45.904114' Example: Request curl --request GET 'http://127.0.0.1:5000/api/v1/sports?active=1' \\ --header 'Content-Type: application/json' Response # 200 Success [ { \"active\": true, \"created_at\": \"2022-03-27T00:15:08\", \"slug\": \"sport-1\", \"uuid\": \"93a10761-e469-4adb-a0c2-9788408e1c85\" }, { \"active\": true, \"created_at\": \"2022-03-27T00:16:40\", \"slug\": \"sport-2\", \"uuid\": \"8cc3a409-7557-42bf-96cc-82776c0dba8a\" } ]","title":"/sports"},{"location":"api/#events","text":"Fields that could be used as query filters to get events: id: int sport_id: int uuid: uuid name: str slug: str active: bool, [0, 1] event_type: str, values can be: pending, started, ended, cancelled. status: str, values can be: preplay, inplay scheduled_at: datetime, UTC format '2022-04-04 01:11:45.904114' start_at: datetime, UTC format'2022-04-04 01:11:45.904114' created_at: datetime, UTC format '2022-04-04 01:11:45.904114' Request curl --request GET 'http://127.0.0.1:5000/api/v1/events?event_type=preplay&active=1' \\ --header 'Content-Type: application/json' Response # 200 Success [ { \"active\": true, \"created_at\": \"2022-04-01 00:26:31\", \"event_type\": \"EventType.preplay\", \"name\": \"Event First\", \"scheduled_at\": \"2022-03-28 00:15:08\", \"slug\": \"event-first\", \"start_at\": null, \"status\": \"EventStatus.pending\", \"uuid\": \"e1ec2c23-1148-48a3-a3be-2e61346323ab\" }, { \"active\": true, \"created_at\": \"2022-04-01 00:26:33\", \"event_type\": \"EventType.preplay\", \"name\": \"Event Third\", \"scheduled_at\": \"2022-03-28 00:15:08\", \"slug\": \"event-thrid\", \"start_at\": \"2022-04-01 00:26:33\", \"status\": \"EventStatus.started\", \"uuid\": \"d224d7fa-ce66-4f56-bf14-ab4550ce47b9\" } ]","title":"/events"},{"location":"api/#selections","text":"Fields that could be used as query filters to get selections: id: int event_id: int uuid: uuid4 price: float active: bool, [0, 1] outcome: str, values can be: unsettled, void, lose, win. created_at: datetime, UTC format '2022-04-04 01:11:45.904114' Request curl --request GET 'http://127.0.0.1:5000/api/v1/selections?outcome=win&active=1' \\ --header 'Content-Type: application/json' Response # 200 Success [ { \"active\": true, \"created_at\": \"2022-04-02 22:45:55\", \"uuid\": \"450c30b7-97d5-490c-abbd-249fa2a0a8e7\" } ]","title":"/selections"},{"location":"api/#erros","text":"# 4xx Error Generics { \"message\": \"Filter with nonexistent field\", \"status_code\": 400 } # 422 Validation Error { \"message\": \"Field invalid\", \"status_code\": 422 } # 401 Unauthorized { \"msg\": \"Token has expired\" }","title":"Erros"}]}